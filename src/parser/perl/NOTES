 - Some Minc functions have the same names as internal Perl functions.
   For some of these (e.g., system and exit), we just arrange for the
   Perl ones to be used, by putting these names in "funcexcept" before
   making the RT extension.  But for others, we'd like both Perl and
   RTcmix versions to be available: srand, rand, reset, print, splice.
   In my version of Perl (v5.6.0), the RTcmix versions of srand, rand
   and reset override the Perl builtin functions with those names.
   That's probably what we want.  For print and splice, the Perl
   functions override the RTcmix ones.  Not at all clear why there is
   this inconsistency.  It's ok for print -- who wouldn't want to use
   the Perl print instead of the RTcmix one?  And splice is an RTcmix
   inst that hardly anyone would use, esp. in a Perl script.

   Some important stuff about using the overriden form of one of these
   functions...

   If you really want to use the RTcmix version of print or splice,
   call it with the module prefix:

      RT::print($foo);

   If you really want to use the Perl version of srand, rand or reset,
   call it with the CORE:: prefix:

      CORE::srand(4);
      $foo = CORE::rand(99);

   Hopefully future Perl versions will be consistent with v5.6.0.

   If not, we can always move to a scheme where the RTcmix functions
   have aliases, like rt_srand.  But that's not really desirable.


 - Need a way of registering RTcmix function names that aren't part of 
   the installation tree, i.e., user functions?


 - Measure performance relative to Minc.  If it's really bad, some
   possible ways to improve it:

      1) Don't register all the function names for insts that
         aren't even compiled.  What this really means is either
         hand-editing the funclist or getting rid of the disk-based
         cmix inst dirs in insts.std that have equivalent RT versions.

      2) Make a scheme that registers RTcmix functions in two classes:
         those that expect to receive strings, and those that don't.
         The former could use the existing glue function.  The latter
         (the vast majority of insts) could use a simpler glue function
         that doesn't test each arg to find out if it's a string.
         Unfortunately, this requires a config file in each inst
         dir listing the insts and what they expect.

   After running a few informal tests, it doesn't look like there's a
   significant performance hit anyway!  Let me know if you find otherwise.



-JGG, 29-Jul-00, 4-Feb-01

