Performance
-----------

 - Measure performance relative to Minc.

   If it's really bad, some possible ways to improve it:

      1) Don't register all the function names for insts that
         aren't even compiled.  What this really means is either
         hand-editing the funclist or getting rid of the disk-based
         cmix inst dirs in insts.std that have equivalent RT versions.

      2) Make a scheme that registers RTcmix functions in two classes:
         those that expect to receive strings, and those that don't.
         The former could use the existing glue function.  The latter
         (the vast majority of insts) could use a simpler glue function
         that doesn't test each arg to find out if it's a string.
         Unfortunately, this requires a config file in each inst
         dir listing the insts and what they expect.

   After running a few informal tests, it doesn't look like there's
   a significant performance hit anyway!  Let me know if you find
   otherwise.


Other
-----

 - Some Minc functions have the same names as internal Perl functions.
   For some of these (e.g., system and exit), we just arrange for the
   Perl ones to be used, by putting these names in "funcexcept" before
   making the RT extension.  But for others that won't work well.  For
   example, the RTcmix and Perl reset functions do completely different
   things.  To be sure you're getting the RTcmix reset, use the alias
   "control_rate" instead of "reset".  (The alias is installed in
   sys/ug_intro.c.)  Other functions need work.  For example, rand()
   and srand() exist in both RTcmix and Perl.  I can imagine someone
   wanting to use both in different situations.  Probably we should
   list these names in "funcexcept" and provide aliases for the RTcmix
   versions (in sys/ug_intro.c) -- perhaps "rtsrand" and "rtrand".

 - A way of registering RTcmix function names that aren't part of 
   the installation tree, i.e., user functions?



-JGG, 29-Jul-00

