package RT;

# JGG: This will have to be relaxed at some point...
require 5.005_62;
use strict;

use warnings;

require Exporter;
require DynaLoader;

our @ISA = qw(Exporter DynaLoader);

# Items to export into callers namespace by default. Note: do not export
# names by default without a very good reason. Use EXPORT_OK instead.
# Do not simply export all your public functions/methods/constants.

# This allows declaration	use RT ':all';
# If you do not need this, moving things directly into @EXPORT or @EXPORT_OK
# will save memory.
our %EXPORT_TAGS = ( 'all' => [ qw(
	
) ] );

our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );

our @EXPORT = qw(
	
);
our $VERSION = '0.01';

bootstrap RT $VERSION;

# Preloaded methods go here.

1;
__END__
# Below is stub documentation for your module. You better edit it!

=head1 NAME

RT - Perl extension that provides RTcmix functions to a Perl interpreter
imbedded in RTcmix.

=head1 SYNOPSIS

use RT;

Then call any RTcmix function from within a Perl script.  Since all the
RTcmix functions have been exported to Perl, there's no need to prefix
"RT::" to them.

=head1 DESCRIPTION

This extension creates glue code that interfaces Perl with the RTcmix
dispatcher.  It lets Perl recognize all the function names that you might use
in an RTcmix script, and shows it how to call the RTcmix function
parse_dispatch with your pfields.

This only works when RTcmix has been compiled with the option to embed the Perl
interpreter in RTcmix.

=head2 EXPORT

All RTcmix functions, except for a few found in the "funcexcept" file.
Yes, this goes against all the advice in the Perl man pages, but our
extension is worthless outside of an RTcmix context.


=head1 AUTHOR

John Gibson, <johngibson@virginia.edu>

=head1 SEE ALSO

perl(1), perlxs(1), perlxstut(1), perlguts(1), perlembed(1).

=cut
